import { existsSync, unlinkSync } from "fs";
import { connexion } from "../db/db.js";
import {createNotification} from "../model/notification.js"
// fonction pour creer un evenement
/**
 * @swagger
 * /events:
 * post:
 * summary: Cr√©er un √©v√©nement
 * requestBody:
 * required: true
 * content:
 * application/json:
 * schema:
 * type: object
 * properties:
 * title: { type: string }
 * description: { type: string }
 * date: { type: string, format: date-time }
 * location: { type: string }
 * organizer_id: { type: integer }
 * image_url: { type: string }
 * category: { type: string }
 * responses:
 * 200:
 * description: Succ√®s
 * 400:
 * description: Salle r√©serv√©e
 * 500:
 * description: Erreur serveur
 */
export async function createEvent(
    title,
    description,
    date,
    location,
    organizer_id,
    image_url,
    category // Ajouter la cat√©gorie ici
) {
    // V√©rifier si un √©v√©nement existe d√©j√† √† la m√™me date et dans la m√™me salle
    const existingEvent = await connexion.get(
        "SELECT id, title FROM events WHERE date = ? AND location = ?",
        [date, location]
    );

    if (existingEvent) {
        await createNotification(
            organizer_id,
            `La salle est d√©j√† r√©serv√©e pour l'√©v√©nement "${existingEvent.title}" √† cette date.`
        );
        throw new Error(
            "Impossible de cr√©er l'√©v√©nement : la salle est d√©j√† r√©serv√©e √† cette date."
        );
    }

    // Ins√©rer le nouvel √©v√©nement avec la cat√©gorie
    await connexion.run(
        "INSERT INTO events (title, description, date, location, organizer_id, image_url, category) VALUES (?, ?, ?, ?, ?, ?, ?)",
        [title, description, date, location, organizer_id, image_url, category]
    );

    await createNotification(
        organizer_id,
        `Un nouvel √©v√©nement a √©t√© cr√©√© : ${title}`
    );
}
//fonction pour recuperer tous les element par cathegorie
/**
 * @swagger
 * /events/category/{category}:
 * get:
 * summary: √âv√©nements par cat√©gorie
 * parameters:
 * - in: path, name: category, required: true, schema: { type: string }
 * responses:
 * 200:
 * description: Liste des √©v√©nements
 * 500:
 * description: Erreur serveur
 */
export async function GetEventsByCategory(category) {
    try {
        const events = await connexion.all(
            "SELECT * FROM events WHERE category = ?",
            [category]
        );
        return events;
    } catch (error) {
        console.error(
            "Erreur lors de la r√©cup√©ration des √©v√©nements par cat√©gorie :",
            error
        );
        throw error;
    }
}
//fonction pour compter tous les element par cathegorie
/**
 * @swagger
 * /events/category/count:
 * get:
 * summary: Compter les √©v√©nements par cat√©gorie
 * responses:
 * 200:
 * description: Nombre d'√©v√©nements par cat√©gorie
 * 500:
 * description: Erreur serveur
 */
export async function GetEventCountByCategory() {
    try {
        const categories = await connexion.all(`
            SELECT category, COUNT(*) as count
            FROM events
            GROUP BY category
        `);
        return categories;
    } catch (error) {
        console.error(
            "Erreur lors de la r√©cup√©ration du nombre d'√©v√©nements par cat√©gorie :",
            error
        );
        throw error;
    }
}


//fonction pour recuperer tous les element
/**
 * @swagger
 * /events:
 * get:
 * summary: Tous les √©v√©nements
 * responses:
 * 200:
 * description: Liste de tous les √©v√©nements
 * 500:
 * description: Erreur serveur
 */
export async function GetAllEvent() {
    try {
        const events = await connexion.all("SELECT * FROM events");
        return events;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des √©v√©nements :", error);
        throw error;
    }
}

// Fonction pour supprimer un √©v√©nement
/**
 * @swagger
 * /events/{id}:
 * delete:
 * summary: Supprimer un √©v√©nement
 * parameters:
 * - in: path, name: id, required: true, schema: { type: integer }
 * responses:
 * 200:
 * description: Succ√®s
 * 404:
 * description: Non trouv√©
 * 500:
 * description: Erreur serveur
 */
export async function DeletEvent(id) {
    try {
        console.log(`üîç Suppression de l'√©v√©nement ID : ${id}`);

        // V√©rifier si l'√©v√©nement existe
        const event = await connexion.get("SELECT * FROM events WHERE id = ?", [id]);
        if (!event) {
            console.log("‚ö†Ô∏è √âv√©nement introuvable.");
            return { success: false, message: "√âv√©nement introuvable" };
        }

        console.log("üìå √âv√©nement trouv√© :", event);

        // Supprimer l'image si elle existe
        if (event.image_url && existsSync(event.image_url)) {
            unlinkSync(event.image_url);
            console.log("üñºÔ∏è Image supprim√©e :", event.image_url);
        }

        // Supprimer l'√©v√©nement
        await connexion.run("DELETE FROM events WHERE id = ?", [id]);
        console.log("‚úÖ √âv√©nement supprim√© de la base de donn√©es.");

        // Ajouter une notification pour l'organisateur
        await createNotification(event.organizer_id, `L'√©v√©nement "${event.title}" a √©t√© supprim√©.`);
        console.log("üì© Notification envoy√©e.");

        return { success: true, message: "√âv√©nement supprim√©" };
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression de l'√©v√©nement :", error);
        return { success: false, message: "Erreur serveur" };
    }
}

//*****fonction pour modifier un evenement */
/**
 * @swagger
 * /events/{eventId}:
 * put:
 * summary: Mettre √† jour un √©v√©nement
 * parameters:
 * - in: path, name: eventId, required: true, schema: { type: integer }
 * requestBody:
 * required: true
 * content:
 * application/json:
 * schema:
 * type: object
 * properties: { title: { type: string }, description: { type: string }, date: { type: string, format: date-time }, location: { type: string }, organizer_id: { type: integer }, image_url: { type: string }, category: { type: string } }
 * responses:
 * 200:
 * description: Succ√®s
 * 404:
 * description: Non trouv√©
 * 500:
 * description: Erreur serveur
 */
export async function updateEvent(
    eventId,
    title,
    description,
    date,
    location,
    organizer_id,
    image_url,
    category
) {
    // V√©rification si l'√©v√©nement existe d√©j√†
    const existingEvent = await connexion.get(
        "SELECT id FROM events WHERE id = ?",
        [eventId]
    );

    if (!existingEvent) {
        throw new Error("√âv√©nement non trouv√©");
    }

    // Mise √† jour de l'√©v√©nement
    await connexion.run(
        `UPDATE events
         SET title = ?, description = ?, date = ?, location = ?, organizer_id = ?, image_url = ?, category = ?
         WHERE id = ?`,
        [
            title,
            description,
            date,
            location,
            organizer_id,
            image_url,
            category,
            eventId,
        ]
    );

    return {
        eventId,
        title,
        description,
        date,
        location,
        organizer_id,
        image_url,
        category,
    };
}


// Fonction pour r√©cup√©rer un √©v√©nement par ID
/**
 * @swagger
 * /events/{id}:
 * get:
 * summary: R√©cup√©rer un √©v√©nement par ID
 * parameters:
 * - in: path, name: id, required: true, schema: { type: integer }
 * responses:
 * 200:
 * description: √âv√©nement trouv√©
 * 404:
 * description: Non trouv√©
 * 500:
 * description: Erreur serveur
 */
export async function GetEventById(id) {
    try {
        const event = await connexion.get("SELECT * FROM events WHERE id = ?", [
            id,
        ]);

        // V√©rification si l'√©v√©nement est trouv√©
        if (!event) {
            console.log(`Aucun √©v√©nement trouv√© pour l'ID ${id}`);
            return null;
        }

        return event;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration de l'√©v√©nement :", error);
        console.error("D√©tails de l'erreur :", error.stack); // Afficher la stack trace compl√®te
        throw error;
    }
}



// Fonction pour compter le nombre d'√©v√©nements auxquels un √©tudiant est inscrit
/**
 * @swagger
 * /students/{user_id}/events/count:
 * get:
 * summary: Compter les √©v√©nements d'un √©tudiant
 * parameters:
 * - in: path, name: user_id, required: true, schema: { type: integer }
 * responses:
 * 200:
 * description: Nombre d'√©v√©nements de l'√©tudiant
 * 500:
 * description: Erreur serveur
 */
export async function getEventCountForStudent(user_id) {
    try {
        const result = await connexion.get(
            "SELECT COUNT(*) AS event_count FROM participants WHERE user_id = ? AND status = 'inscrit'",
            [user_id]
        );
        return result.event_count;
    } catch (error) {
        console.error(
            "Erreur lors du comptage des √©v√©nements de l'√©tudiant :",
            error
        );
        throw error;
    }
}

// Fonction pour compter le nombre total d'√©tudiants
/**
 * @swagger
 * /students/total:
 * get:
 * summary: Compter tous les √©tudiants
 * responses:
 * 200:
 * description: Nombre total d'√©tudiants
 * 500:
 * description: Erreur serveur
 */
export async function getTotalStudents() {
    try {
        const result = await connexion.get(
            "SELECT COUNT(*) AS student_count FROM users WHERE role = 'participant'"
        );
        return result.student_count;
    } catch (error) {
        console.error("Erreur lors du comptage des √©tudiants :", error);
        throw error;
    }
}

// Fonction pour compter le nombre total d'√©v√©nements enregistr√©s
/**
 * @swagger
 * /students/total:
 * get:
 * summary: Compter tous les √©tudiants
 * responses:
 * 200:
 * description: Nombre total d'√©tudiants
 * 500:
 * description: Erreur serveur
 */
export async function getTotalEvents() {
    try {
        const result = await connexion.get(
            "SELECT COUNT(*) AS event_count FROM events"
        );
        return result.event_count;
    } catch (error) {
        console.error("Erreur lors du comptage des √©v√©nements :", error);
        throw error;
    }
}
//fonction qui permet de r√©cup√©rer un √©v√©nement par son ID 
/**
 * @swagger
 * /students/total:
 * get:
 * summary: Compter tous les √©tudiants
 * responses:
 * 200:
 * description: Nombre total d'√©tudiants
 * 500:
 * description: Erreur serveur
 */
export async function GetEventDetailsById(id) {
    try {
        const event = await connexion.get("SELECT * FROM events WHERE id = ?", [
            id,
        ]);
        return event;
    } catch (error) {
        console.error(
            "Erreur lors de la r√©cup√©ration des d√©tails de l'√©v√©nement :",
            error
        );
        throw error;
    }
}
/**
 * @swagger
 * /students/total:
 * get:
 * summary: Compter tous les √©tudiants
 * responses:
 * 200:
 * description: Nombre total d'√©tudiants
 * 500:
 * description: Erreur serveur
 */
export async function checkIfEventExists(date, location) {
    try {
        const event = await connexion.get(
            "SELECT * FROM events WHERE date = ? AND location = ?",
            [date, location]
        );

        return event
    } catch (error) {
        console.error("Erreur lors de la v√©rification de l'√©v√©nement :", error);
        throw error;
    }
}